// H·ªá th·ªëng c·∫£nh b√°o th√¥ng minh cho d·ªØ li·ªáu sales
import { SettingsData } from '@/contexts/SettingsContext';

export interface AlertRule {
  id: string;
  type: 'revenue' | 'roi' | 'growth' | 'decline' | 'custom';
  condition: 'above' | 'below' | 'equals' | 'changes';
  threshold: number;
  message: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  enabled: boolean;
}

export interface Alert {
  id: string;
  ruleId: string;
  type: string;
  message: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  timestamp: Date;
  data: any;
  acknowledged: boolean;
  dismissed: boolean;
}

export interface SalesData {
  branch: string;
  revenue: number;
  profit: number;
  roi: number;
  growth: number;
  period: string;
}

// Ki·ªÉm tra v√† t·∫°o c·∫£nh b√°o d·ª±a tr√™n d·ªØ li·ªáu
export function checkAlerts(
  salesData: SalesData[],
  settings: SettingsData
): Alert[] {
  const alerts: Alert[] = [];
  
  if (!settings.alertSettings.alertsEnabled) {
    return alerts; // Kh√¥ng c√≥ c·∫£nh b√°o n·∫øu t·∫Øt h·ªá th·ªëng
  }

  // T√≠nh to√°n t·ªïng quan
  const totalRevenue = salesData.reduce((sum, item) => sum + item.revenue, 0);
  const avgROI = salesData.reduce((sum, item) => sum + item.roi, 0) / salesData.length;
  const totalProfit = salesData.reduce((sum, item) => sum + item.profit, 0);

  // 1. C·∫£nh b√°o doanh thu
  if (settings.alertSettings.enableRevenueAlerts && totalRevenue < settings.alertSettings.revenueThreshold) {
    const shortfall = settings.alertSettings.revenueThreshold - totalRevenue;
    const shortfallPercentage = ((shortfall / settings.alertSettings.revenueThreshold) * 100).toFixed(1);
    
    const severity = parseFloat(shortfallPercentage) > 50 ? 'critical' : parseFloat(shortfallPercentage) > 25 ? 'high' : 'medium';
    
         if (settings.alertSettings.severityLevels?.[severity] ?? true) {
       alerts.push({
         id: `revenue-${Date.now()}`,
         ruleId: 'revenue-threshold',
         type: 'revenue',
         message: `üö® C·∫¢NH B√ÅO DOANH THU: Doanh thu hi·ªán t·∫°i ${formatCurrency(totalRevenue, settings.userPreferences.currency)} th·∫•p h∆°n ${shortfallPercentage}% so v·ªõi m·ª•c ti√™u ${formatCurrency(settings.alertSettings.revenueThreshold, settings.userPreferences.currency)}. Thi·∫øu h·ª•t ${formatCurrency(shortfall, settings.userPreferences.currency)}. C·∫ßn ki·ªÉm tra chi·∫øn l∆∞·ª£c b√°n h√†ng v√† t·ªëi ∆∞u h√≥a c√°c k√™nh marketing.`,
         severity,
         timestamp: new Date(),
         data: { totalRevenue, threshold: settings.alertSettings.revenueThreshold, shortfall, shortfallPercentage },
         acknowledged: false,
         dismissed: false
       });
     }
  }

  // 2. C·∫£nh b√°o ROI
  if (settings.alertSettings.enableROIAlerts && avgROI < settings.alertSettings.roiThreshold) {
    const roiGap = settings.alertSettings.roiThreshold - avgROI;
    const roiGapPercentage = ((roiGap / settings.alertSettings.roiThreshold) * 100).toFixed(1);
    
    const severity = parseFloat(roiGapPercentage) > 50 ? 'critical' : parseFloat(roiGapPercentage) > 25 ? 'high' : 'medium';
    
         if (settings.alertSettings.severityLevels?.[severity] ?? true) {
       alerts.push({
         id: `roi-${Date.now()}`,
         ruleId: 'roi-threshold',
         type: 'roi',
         message: `üìâ C·∫¢NH B√ÅO ROI: ROI trung b√¨nh ${avgROI.toFixed(2)}% th·∫•p h∆°n ${roiGapPercentage}% so v·ªõi m·ª•c ti√™u ${settings.alertSettings.roiThreshold}%. Kho·∫£ng c√°ch ${roiGap.toFixed(2)}%. C·∫ßn xem x√©t l·∫°i chi ph√≠ qu·∫£ng c√°o, t·ªëi ∆∞u h√≥a chi·∫øn l∆∞·ª£c marketing v√† c·∫£i thi·ªán hi·ªáu qu·∫£ chuy·ªÉn ƒë·ªïi kh√°ch h√†ng.`,
         severity,
         timestamp: new Date(),
         data: { avgROI, threshold: settings.alertSettings.roiThreshold, roiGap, roiGapPercentage },
         acknowledged: false,
         dismissed: false
       });
     }
  }

  // 3. C·∫£nh b√°o chi nh√°nh c√≥ v·∫•n ƒë·ªÅ
  if (settings.alertSettings.enableBranchAlerts) {
    const problematicBranches = salesData.filter(item => 
      item.revenue < settings.alertSettings.revenueThreshold * 0.5 || 
      item.roi < settings.alertSettings.roiThreshold * 0.5
    );

    problematicBranches.forEach(branch => {
      const revenueGap = settings.alertSettings.revenueThreshold * 0.5 - branch.revenue;
      const roiGap = settings.alertSettings.roiThreshold * 0.5 - branch.roi;
      
      const severity = revenueGap > settings.alertSettings.revenueThreshold * 0.3 || roiGap > settings.alertSettings.roiThreshold * 0.3 ? 'critical' : 'high';
      
             if (settings.alertSettings.severityLevels?.[severity] ?? true) {
         alerts.push({
           id: `branch-${branch.branch}-${Date.now()}`,
           ruleId: 'branch-performance',
           type: 'branch',
           message: `üè¢ C·∫¢NH B√ÅO CHI NH√ÅNH ${branch.branch}: Hi·ªáu su·∫•t k√©m nghi√™m tr·ªçng! Doanh thu ${formatCurrency(branch.revenue, settings.userPreferences.currency)} (thi·∫øu ${formatCurrency(revenueGap, settings.userPreferences.currency)}), ROI ${branch.roi.toFixed(2)}% (th·∫•p h∆°n ${roiGap.toFixed(2)}%). C·∫ßn can thi·ªáp ngay l·∫≠p t·ª©c: ki·ªÉm tra qu·∫£n l√Ω, ƒë√†o t·∫°o nh√¢n vi√™n, v√† xem x√©t l·∫°i chi·∫øn l∆∞·ª£c kinh doanh t·∫°i chi nh√°nh n√†y.`,
           severity,
           timestamp: new Date(),
           data: { ...branch, revenueGap, roiGap },
           acknowledged: false,
           dismissed: false
         });
       }
    });
  }

  // 4. C·∫£nh b√°o tƒÉng tr∆∞·ªüng √¢m
  if (settings.alertSettings.enableGrowthAlerts) {
    const negativeGrowth = salesData.filter(item => item.growth < settings.alertSettings.growthThreshold);
    if (negativeGrowth.length > 0) {
      const avgNegativeGrowth = negativeGrowth.reduce((sum, item) => sum + item.growth, 0) / negativeGrowth.length;
      const worstBranch = negativeGrowth.reduce((worst, current) => current.growth < worst.growth ? current : worst);
      
      const severity = avgNegativeGrowth < -20 ? 'critical' : avgNegativeGrowth < -10 ? 'high' : 'medium';
      
             if (settings.alertSettings.severityLevels?.[severity] ?? true) {
         alerts.push({
           id: `growth-${Date.now()}`,
           ruleId: 'negative-growth',
           type: 'growth',
           message: `üìâ C·∫¢NH B√ÅO TƒÇNG TR∆Ø·ªûNG √ÇM: ${negativeGrowth.length} chi nh√°nh ƒëang suy gi·∫£m v·ªõi m·ª©c tƒÉng tr∆∞·ªüng trung b√¨nh ${avgNegativeGrowth.toFixed(2)}%. Chi nh√°nh ${worstBranch.branch} c√≥ m·ª©c gi·∫£m nghi√™m tr·ªçng nh·∫•t (${worstBranch.growth.toFixed(2)}%). C·∫ßn ph√¢n t√≠ch nguy√™n nh√¢n, ƒë√°nh gi√° th·ªã tr∆∞·ªùng v√† tri·ªÉn khai bi·ªán ph√°p kh·∫Øc ph·ª•c ngay l·∫≠p t·ª©c.`,
           severity,
           timestamp: new Date(),
           data: { negativeGrowth, avgNegativeGrowth, worstBranch },
           acknowledged: false,
           dismissed: false
         });
       }
    }
  }

  // 5. C·∫£nh b√°o l·ª£i nhu·∫≠n th·∫•p
  if (settings.alertSettings.enableProfitAlerts && totalProfit < settings.alertSettings.profitThreshold) {
    const profitMargin = ((totalProfit / totalRevenue) * 100).toFixed(1);
    const profitGap = settings.alertSettings.profitThreshold - totalProfit;
    
    const severity = profitGap > settings.alertSettings.profitThreshold * 0.5 ? 'critical' : profitGap > settings.alertSettings.profitThreshold * 0.25 ? 'high' : 'medium';
    
         if (settings.alertSettings.severityLevels?.[severity] ?? true) {
       alerts.push({
         id: `profit-${Date.now()}`,
         ruleId: 'low-profit-margin',
         type: 'profit',
         message: `üí∞ C·∫¢NH B√ÅO L·ª¢I NHU·∫¨N: T·ª∑ su·∫•t l·ª£i nhu·∫≠n ch·ªâ ${profitMargin}% (th·∫•p h∆°n m·ª©c chu·∫©n 10%). L·ª£i nhu·∫≠n ${formatCurrency(totalProfit, settings.userPreferences.currency)} tr√™n doanh thu ${formatCurrency(totalRevenue, settings.userPreferences.currency)}. C·∫ßn ki·ªÉm so√°t chi ph√≠, t·ªëi ∆∞u h√≥a gi√° b√°n v√† c·∫£i thi·ªán hi·ªáu qu·∫£ v·∫≠n h√†nh.`,
         severity,
         timestamp: new Date(),
         data: { totalProfit, totalRevenue, profitMargin, profitGap },
         acknowledged: false,
         dismissed: false
       });
     }
  }

  // 6. C·∫£nh b√°o chi ph√≠ qu·∫£ng c√°o cao (t√≠nh t·ª´ ROI)
  if (settings.alertSettings.enableAdCostAlerts) {
    const estimatedAdCost = totalRevenue * (avgROI / 100); // ∆Ø·ªõc t√≠nh t·ª´ ROI
    const adCostRatio = estimatedAdCost / totalRevenue;
    const adCostPercentage = (adCostRatio * 100);
    
    if (adCostPercentage > settings.alertSettings.adCostThreshold) {
      const severity = adCostPercentage > settings.alertSettings.adCostThreshold * 1.5 ? 'critical' : adCostPercentage > settings.alertSettings.adCostThreshold * 1.2 ? 'high' : 'medium';
      
             if (settings.alertSettings.severityLevels?.[severity] ?? true) {
         alerts.push({
           id: `adcost-${Date.now()}`,
           ruleId: 'high-ad-cost',
           type: 'adcost',
           message: `üì∫ C·∫¢NH B√ÅO CHI PH√ç QU·∫¢NG C√ÅO: Chi ph√≠ qu·∫£ng c√°o ∆∞·ªõc t√≠nh ${formatCurrency(estimatedAdCost, settings.userPreferences.currency)} chi·∫øm ${adCostPercentage.toFixed(1)}% doanh thu (cao h∆°n m·ª©c chu·∫©n ${settings.alertSettings.adCostThreshold}%). C·∫ßn ƒë√°nh gi√° hi·ªáu qu·∫£ ROI c·ªßa c√°c k√™nh qu·∫£ng c√°o, t·ªëi ∆∞u h√≥a ng√¢n s√°ch v√† t√¨m ki·∫øm c√°c k√™nh marketing hi·ªáu qu·∫£ h∆°n.`,
           severity,
           timestamp: new Date(),
           data: { estimatedAdCost, totalRevenue, adCostRatio, adCostPercentage },
           acknowledged: false,
           dismissed: false
         });
       }
    }
  }

  // 7. C·∫£nh b√°o bi·∫øn ƒë·ªông l·ªõn gi·ªØa c√°c chi nh√°nh
  const revenues = salesData.map(item => item.revenue);
  const maxRevenue = Math.max(...revenues);
  const minRevenue = Math.min(...revenues);
  const revenueVariation = ((maxRevenue - minRevenue) / maxRevenue) * 100;
  
  if (revenueVariation > 80) { // Bi·∫øn ƒë·ªông tr√™n 80%
    alerts.push({
      id: `variation-${Date.now()}`,
      ruleId: 'high-revenue-variation',
      type: 'variation',
      message: `üìä C·∫¢NH B√ÅO BI·∫æN ƒê·ªòNG DOANH THU: Ch√™nh l·ªách gi·ªØa chi nh√°nh cao nh·∫•t v√† th·∫•p nh·∫•t l√™n t·ªõi ${revenueVariation.toFixed(1)}% (${formatCurrency(maxRevenue, settings.userPreferences.currency)} vs ${formatCurrency(minRevenue, settings.userPreferences.currency)}). C·∫ßn ph√¢n t√≠ch nguy√™n nh√¢n, chia s·∫ª best practices v√† h·ªó tr·ª£ c√°c chi nh√°nh y·∫øu k√©m.`,
      severity: 'medium',
      timestamp: new Date(),
      data: { maxRevenue, minRevenue, revenueVariation },
      acknowledged: false,
      dismissed: false
    });
  }

  // 7. C·∫£nh b√°o bi·∫øn ƒë·ªông l·ªõn (n·∫øu c√≥ d·ªØ li·ªáu l·ªãch s·ª≠)
  if (settings.alertSettings.enableVariationAlerts && salesData.length > 1) {
    const revenues = salesData.map(item => item.revenue);
    const meanRevenue = revenues.reduce((sum, rev) => sum + rev, 0) / revenues.length;
    const variance = revenues.reduce((sum, rev) => sum + Math.pow(rev - meanRevenue, 2), 0) / revenues.length;
    const standardDeviation = Math.sqrt(variance);
    const coefficientOfVariation = (standardDeviation / meanRevenue) * 100;
    
    if (coefficientOfVariation > 50) { // Bi·∫øn ƒë·ªông tr√™n 50%
      const severity = coefficientOfVariation > 100 ? 'critical' : coefficientOfVariation > 75 ? 'high' : 'medium';
      
             if (settings.alertSettings.severityLevels?.[severity] ?? true) {
         alerts.push({
           id: `variation-${Date.now()}`,
           ruleId: 'high-variation',
           type: 'variation',
           message: `üìä C·∫¢NH B√ÅO BI·∫æN ƒê·ªòNG: H·ªá s·ªë bi·∫øn ƒë·ªông doanh thu ${coefficientOfVariation.toFixed(1)}% (cao h∆°n m·ª©c chu·∫©n 50%). ƒêi·ªÅu n√†y cho th·∫•y doanh thu kh√¥ng ·ªïn ƒë·ªãnh, c√≥ th·ªÉ do th·ªã tr∆∞·ªùng bi·∫øn ƒë·ªông ho·∫∑c chi·∫øn l∆∞·ª£c kinh doanh ch∆∞a hi·ªáu qu·∫£. C·∫ßn ph√¢n t√≠ch nguy√™n nh√¢n v√† ·ªïn ƒë·ªãnh ho·∫°t ƒë·ªông.`,
           severity,
           timestamp: new Date(),
           data: { coefficientOfVariation, meanRevenue, standardDeviation },
           acknowledged: false,
           dismissed: false
         });
       }
    }
  }

  // 8. C·∫£nh b√°o hi·ªáu su·∫•t t·ªïng th·ªÉ
  const overallPerformance = (avgROI * 0.4) + ((totalProfit / totalRevenue) * 100 * 0.3) + ((totalRevenue / settings.alertSettings.revenueThreshold) * 100 * 0.3);
  
  if (overallPerformance < 60) { // Hi·ªáu su·∫•t t·ªïng th·ªÉ d∆∞·ªõi 60%
    const severity = overallPerformance < 30 ? 'critical' : overallPerformance < 45 ? 'high' : 'medium';
    
         if (settings.alertSettings.severityLevels?.[severity] ?? true) {
       alerts.push({
         id: `performance-${Date.now()}`,
         ruleId: 'overall-performance',
         type: 'performance',
         message: `üéØ C·∫¢NH B√ÅO HI·ªÜU SU·∫§T T·ªîNG TH·ªÇ: Ch·ªâ s·ªë hi·ªáu su·∫•t ƒë·∫°t ${overallPerformance.toFixed(1)}/100 (th·∫•p h∆°n m·ª©c chu·∫©n 60%). C·∫ßn xem x√©t to√†n di·ªán: t·ªëi ∆∞u h√≥a ROI, c·∫£i thi·ªán t·ª∑ su·∫•t l·ª£i nhu·∫≠n v√† tƒÉng doanh thu ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u kinh doanh.`,
         severity,
         timestamp: new Date(),
         data: { overallPerformance, avgROI, profitMargin: (totalProfit / totalRevenue) * 100, revenueRatio: (totalRevenue / settings.alertSettings.revenueThreshold) * 100 },
         acknowledged: false,
         dismissed: false
       });
     }
  }

  return alerts;
}

// G·ª≠i c·∫£nh b√°o qua email (gi·∫£ l·∫≠p)
export async function sendEmailAlert(alert: Alert, settings: SettingsData): Promise<boolean> {
  if (!settings.alertSettings.emailNotifications) return false;

  try {
    // Gi·∫£ l·∫≠p g·ª≠i email
    console.log('üìß G·ª≠i email c·∫£nh b√°o:', {
      to: 'admin@company.com',
      subject: `C·∫£nh b√°o: ${alert.type}`,
      message: alert.message,
      severity: alert.severity,
      timestamp: alert.timestamp
    });

    // Trong th·ª±c t·∫ø s·∫Ω g·ªçi API email service
    // await emailService.send({
    //   to: settings.email,
    //   subject: `[C·∫¢NH B√ÅO] ${alert.message}`,
    //   body: generateEmailTemplate(alert)
    // });

    return true;
  } catch (error) {
    console.error('L·ªói g·ª≠i email c·∫£nh b√°o:', error);
    return false;
  }
}

// G·ª≠i push notification (gi·∫£ l·∫≠p)
export async function sendPushNotification(alert: Alert, settings: SettingsData): Promise<boolean> {
  if (!settings.alertSettings.pushNotifications) return false;

  try {
    // Gi·∫£ l·∫≠p push notification
    console.log('üîî G·ª≠i push notification:', {
      title: `C·∫£nh b√°o ${alert.severity.toUpperCase()}`,
      body: alert.message,
      icon: getAlertIcon(alert.severity),
      timestamp: alert.timestamp
    });

    // Trong th·ª±c t·∫ø s·∫Ω g·ªçi Web Push API
    // if ('serviceWorker' in navigator && 'PushManager' in window) {
    //   const registration = await navigator.serviceWorker.ready;
    //   await registration.showNotification(title, options);
    // }

    return true;
  } catch (error) {
    console.error('L·ªói g·ª≠i push notification:', error);
    return false;
  }
}

// Hi·ªÉn th·ªã c·∫£nh b√°o trong UI
export function showInAppAlert(alert: Alert): void {
  // T·∫°o toast notification
  const toast = document.createElement('div');
  toast.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 max-w-sm ${
    alert.severity === 'critical' ? 'bg-red-500 text-white' :
    alert.severity === 'high' ? 'bg-orange-500 text-white' :
    alert.severity === 'medium' ? 'bg-yellow-500 text-black' :
    'bg-blue-500 text-white'
  }`;
  
  toast.innerHTML = `
    <div class="flex items-start">
      <div class="flex-shrink-0">
        ${getAlertIcon(alert.severity)}
      </div>
      <div class="ml-3">
        <p class="text-sm font-medium">${alert.message}</p>
        <p class="text-xs opacity-75 mt-1">${formatDate(alert.timestamp, 'DD/MM/YYYY HH:mm')}</p>
      </div>
      <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white opacity-75 hover:opacity-100">
        ‚úï
      </button>
    </div>
  `;

  document.body.appendChild(toast);
  
  // T·ª± ƒë·ªông ·∫©n sau 10 gi√¢y
  setTimeout(() => {
    if (toast.parentElement) {
      toast.remove();
    }
  }, 10000);
}

// L·∫•y icon cho c·∫£nh b√°o
function getAlertIcon(severity: string): string {
  switch (severity) {
    case 'critical': return 'üö®';
    case 'high': return '‚ö†Ô∏è';
    case 'medium': return 'üìä';
    case 'low': return '‚ÑπÔ∏è';
    default: return 'üîî';
  }
}

// Format currency helper
function formatCurrency(amount: number, currency: string): string {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: currency,
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount);
}

// Format date helper
function formatDate(date: Date, format: string): string {
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear();
  const hours = date.getHours().toString().padStart(2, '0');
  const minutes = date.getMinutes().toString().padStart(2, '0');
  
  return format
    .replace('DD', day)
    .replace('MM', month)
    .replace('YYYY', year.toString())
    .replace('HH', hours)
    .replace('mm', minutes);
}

// T·∫°o b√°o c√°o c·∫£nh b√°o
export function generateAlertReport(alerts: Alert[]): string {
  if (alerts.length === 0) {
    return '‚úÖ Kh√¥ng c√≥ c·∫£nh b√°o n√†o';
  }

  const critical = alerts.filter(a => a.severity === 'critical').length;
  const high = alerts.filter(a => a.severity === 'high').length;
  const medium = alerts.filter(a => a.severity === 'medium').length;
  const low = alerts.filter(a => a.severity === 'low').length;

  return `
üìä B√°o c√°o c·∫£nh b√°o (${alerts.length} c·∫£nh b√°o):
üö® Critical: ${critical}
‚ö†Ô∏è High: ${high}
üìä Medium: ${medium}
‚ÑπÔ∏è Low: ${low}

${alerts.map(alert => `‚Ä¢ ${alert.message}`).join('\n')}
  `.trim();
}

// L∆∞u c·∫£nh b√°o v√†o localStorage
export function saveAlerts(alerts: Alert[]): void {
  try {
    localStorage.setItem('dashboard-alerts', JSON.stringify(alerts));
  } catch (error) {
    console.error('L·ªói l∆∞u c·∫£nh b√°o:', error);
  }
}

// ƒê·ªçc c·∫£nh b√°o t·ª´ localStorage
export function loadAlerts(): Alert[] {
  try {
    const saved = localStorage.getItem('dashboard-alerts');
    if (saved) {
      const alerts = JSON.parse(saved);
      return alerts.map((alert: any) => ({
        ...alert,
        timestamp: new Date(alert.timestamp)
      }));
    }
  } catch (error) {
    console.error('L·ªói ƒë·ªçc c·∫£nh b√°o:', error);
  }
  return [];
}

// X√≥a c·∫£nh b√°o ƒë√£ x·ª≠ l√Ω
export function dismissAlert(alertId: string): void {
  const alerts = loadAlerts();
  const updatedAlerts = alerts.map(alert => 
    alert.id === alertId ? { ...alert, dismissed: true } : alert
  );
  saveAlerts(updatedAlerts);
}

// ƒê√°nh d·∫•u c·∫£nh b√°o ƒë√£ xem
export function acknowledgeAlert(alertId: string): void {
  const alerts = loadAlerts();
  const updatedAlerts = alerts.map(alert => 
    alert.id === alertId ? { ...alert, acknowledged: true } : alert
  );
  saveAlerts(updatedAlerts);
}
